using System;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using static EdjCase.Cryptography.BLS.Interop2;

namespace EdjCase.Cryptography.BLS
{
	internal class Test
	{
		public static void Main()
		{
			var publicKey = new byte[]
			{
				0x81, 0x4C, 0x0E, 0x6E, 0xC7, 0x1F, 0xAB, 0x58, 0x3B, 0x08, 0xBD, 0x81, 0x37, 0x3C, 0x25, 0x5C, 0x3C, 0x37, 0x1B, 0x2E, 0x84, 0x86, 0x3C, 0x98, 0xA4, 0xF1, 0xE0, 0x8B, 0x74, 0x23, 0x5D, 0x14, 0xFB, 0x5D, 0x9C, 0x0C, 0xD5, 0x46, 0xD9, 0x68, 0x5F, 0x91, 0x3A, 0x0C, 0x0B, 0x2C, 0xC5, 0x34, 0x15, 0x83, 0xBF, 0x4B, 0x43, 0x92, 0xE4, 0x67, 0xDB, 0x96, 0xD6, 0x5B, 0x9B, 0xB4, 0xCB, 0x71, 0x71, 0x12, 0xF8, 0x47, 0x2E, 0x0D, 0x5A, 0x4D, 0x14, 0x50, 0x5F, 0xFD, 0x74, 0x84, 0xB0, 0x12, 0x91, 0x09, 0x1C, 0x5F, 0x87, 0xB9, 0x88, 0x83, 0x46, 0x3F, 0x98, 0x09, 0x1A, 0x0B, 0xAA, 0xAE
			};
			var hash = new byte[]
			{
				0x0D, 0x69, 0xC4, 0xEE, 0x75, 0x34, 0x4C, 0x70, 0x17, 0x8C, 0xB3, 0xF5, 0x88, 0x52, 0x9E, 0x94, 0xD6, 0x46, 0x85, 0x23, 0xB7, 0x7C, 0xDF, 0xA8, 0x29, 0x6F, 0xE1, 0x4F, 0x9E, 0x8F, 0xD8, 0x62, 0x24, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			};
			var signature = new byte[]
			{
				0xAE, 0x65, 0xCE, 0x93, 0x69, 0xD2, 0xC2, 0xD2, 0x7B, 0xCD, 0xBB, 0x31, 0x03, 0x02, 0x50, 0xC0, 0xC4, 0x94, 0xD6, 0x19, 0x07, 0xE0, 0xB6, 0xB9, 0x57, 0xA7, 0x2E, 0x46, 0x80, 0x2F, 0xAE, 0x33, 0xD6, 0xD2, 0xA6, 0xCA, 0x55, 0xC7, 0x42, 0x8D, 0x83, 0xF5, 0x81, 0xB4, 0xD9, 0x0F, 0xDF, 0x6F
			};
			try
			{
				bool isValid1 = BlsUtil.VerifyHash(publicKey, hash, signature);
				Console.WriteLine("1: " + isValid1);
			}
			catch (Exception ex)
			{
				Console.WriteLine("1: " + ex);
			}
			try
			{
				bool isValid2 = BlsUtil2.VerifyHash(publicKey, hash, signature);
				Console.WriteLine("2: " + isValid2);

			}
			catch (Exception ex)
			{
				Console.WriteLine("2: " + ex);
			}
		}
	}
}
